#set title 'fmoe:fragmentation';

function json_Read;
function GetBasedir;
function RenderTemplate;
function BatchBinarySearch;
global fmoe_templates;


local function DetachMarker [color, bonds]
    // detach marker options
    // :color: coloar
    // :bonds: List[(atom, atom)]
    // TODO: move to View
    local bda = first tr bonds;
    local baa = second tr bonds;

    local pos_bda = tr aPos bda;
    local pos_baa = tr aPos baa;
    local diff = pos_baa - pos_bda;

    local cap_center = pos_bda + 0.4 * diff;
    local cap_head = pos_bda + 0.2 * diff;
    local cap_axis = cap_head - cap_center;
    local sphere_center = pos_bda + 0.6 * diff;

    return apt G_Cat [
        apt G_Cap [color, cap_center, cap_axis, 0.8, 2],
        apt G_Sphere [color, sphere_center, 0.2, 2]
    ];
endfunction


local function DrawDetachMarker [title_prefix, color, bonds]
    // :title_prefix: 
    // :color:
    // :bonds: List[(atom, atom)]
    // TODO: move to view
    local keys = app GCreate tok_cat [title_prefix, totok igen length bonds];
    app GVertex apt cat [keys, DetachMarker [color, bonds]];
    return keys;
endfunction


local function FMOFragmentationProtein chains
    // divides protetins into fragments
    // :chains:
    // return: List[(atom, atom)]
    chains = chains | app andE (rType cResidues chains == 'amino');
    local atoms = rAtoms (cat cResidues chains);
    local bda = apt mget [atoms, aName atoms == 'CA'];
    local baa = apt mget [atoms, aName atoms == 'C'];
    return tr [bda, baa] | app andE tr [app length bda, app length baa];
endfunction


local function IsCTerminalFragment fragments
    // :fragments:
    // return index of fragments
    local is_amino = app andE eqE [rType aResidue fragments, ['amino']];
    local coo = andE [
      eqE [app add eqE [aMMType fragments, 'O2'], 2],
      eqE [app add eqE [aMMType fragments, 'C'], 1],
      eqE [app length fragments, 3]
    ];
    local cooh = andE [
      eqE [app add eqE [aMMType fragments, 'O'], 1],
      eqE [app add eqE [aMMType fragments, 'C'], 1],
      eqE [app add eqE [aMMType fragments, 'OH'], 1],
      eqE [app add eqE [aMMType fragments, 'HO'], 1],
      eqE [app length fragments, 4]
    ];

    return andE [is_amino, orE[coo, cooh]];
endfunction


local function StripBondExtra bonds
    // ?
    local bda = app first bonds;
    local baa = app second bonds;
    return tr [bda, baa];
endfunction


global function PartitionAtoms [atoms, bonds]
    local satoms = sort atoms;
    local nbr = BondGraph satoms;
    local [bda, baa] = tr StripBondExtra bonds;
    local ibonds = tr [BatchBinarySearch [bda, satoms], BatchBinarySearch [baa, satoms]];
    ibonds = ibonds | app andE neE [ibonds, 0];
    nbr = graph_ecutE [nbr, tr ibonds];
    local unsorted = apt get [[satoms], graph_ccomponent_list nbr];
    return unsorted[x_sort app min aNumber unsorted];
endfunction


global function FMOFragmentation chains
    local bonds = FMOFragmentationProtein chains;
    local frags = PartitionAtoms [cat cAtoms chains, bonds];
    local terms = cat (frags | IsCTerminalFragment frags);
    local mask = not app orE app cat apt eqE [bonds, [[terms]]];
    return bonds | mask;
endfunction


global FMOE_BASISSET_DATA;


local function LoadBasisSetData []
    // TODO:   
    if FMOE_BASISSET_DATA === [] then
        local data = fcat [GetBasedir[], 'basisset.json'];
        local json = freadb [data, 'line', 1000];
        FMOE_BASISSET_DATA = first json_Read [cat json, []];
    endif
endfunction


local function GetBasisSetNames []
    // ?
    LoadBasisSetData [];
    return first untag FMOE_BASISSET_DATA;
endfunction


local function GetProgramBasisSets ext
    // ?
    local data = fcat [GetBasedir[], 'basisset', tok_cat [ext ,'.json']];
    if ftype data === 'file' then
        local json = freadb [data, 'line', 1000];
        local res = first json_Read [cat json, []];;
        return [res.default, res.list];
    else
        local names = GetBasisSetNames [];
        return [[], tr [names, names]];
    endif
endfunction


local function GetBasisSetData name
    // ?
    LoadBasisSetData [];
    return tagget [FMOE_BASISSET_DATA, name];
endfunction


local function GetNumberOfFunctions [basis, atoms]
    // Functionals?
    return app add apt tagget [GetBasisSetData basis, aElement atoms];
endfunction


const MAIN_PANEL = [
    name: 'fmoe_fragmentation',
    title: 'FMOE Fragmentation',
    windowName: 'FMOEFragmentation',
    text: 'Generate',
    Vbox: [
        Hbox: [
            Label: [
                text: 'Bonds',
                extendH: 1,
                resizeH: 1
            ],
            Button: [
                name: 'auto',
                text: 'auto'
            ],
            Button: [
                name: 'add_bond',
                text: '+',
                font: 'largeFixedBold'
            ],
            Button: [
                name: 'remove_bond',
                text: '-',
                font: 'largeFixedBold',
                foreground: 'red'
            ],
            Button: [
                name: 'reset',
                text: '0',
                font: 'largeFixedBold'
            ]
        ],
        Listbox: [
            name: 'detached_bond_list',
            header: '#{+4n}\tT{-1t}\tBDA{+11t}\tBAA{+11t}',
            headerBubbleHelp: tok_cat [
                '#: index\n',
                'T: bond split type\n',
                '   A: auto\n',
                '   M: manual\n',
                'Res.: residue name\n',
                'BDA: bond detached atom\n',
                'BAA: bond attached atom'],
            onTrigger: 'return',
            multiSelect: 2,
            extendV: 1,
            resizeV: 1,
            extendH: 1,
            resizeH: 1,
            type: 'int',
            sortEnable: 1,
            len: 20,
            width: 37
        ],
        Hbox: [
            Label: [
                text: 'Fragments',
                extendH: 1,
                resizeH: 1
            ],
            Option: [
                name: 'select_basisset',
                onTrigger: 'return',
                extendH: 1,
                resizeH: 1
            ],
            Button: [
                text: 'refresh',
                name: 'refresh'
            ]
        ],
        Listbox: [
            name: 'fragment_list',
            header: '#{+4n}\tRes.{+6t}\tnA{+3n}\tAO{+3n}\tD{+2n}\tA{+2n}\tC{+2n}',
            headerBubbleHelp: tok_cat [
                '#: index\n',
                'Res.: majour residue\n',
                'nA: fragment atom count\n',
                'AO: fragment atomic orbital count\n',
                'D: number of detached electron pairs\n',
                'A: number of attached electron pairs\n',
                'C: fragment formal charge'
            ],
            onTrigger: 'return',
            multiSelect: 2,
            extendV: 1,
            resizeV: 1,
            extendH: 1,
            resizeH: 1,
            type: 'int',
            sortEnable: 1,
            len: 20,
            width: 42
        ],
        Checkbox : [
                name: 'gen_job',
                text: ['generate .sh file'] 
            ],
        Hbox: [
            Label: [text: 'template:'],
            Option: [
                name: 'select_template',
                extendH: 1,
                resizeH: 1
            ]
        ]
    ]
];


local function GetTemplates path
    // :path: templates directory path
    // return: List[str]
    local templates = ftail flist path;
    if length templates > 1 then
        return templates | not eqE [templates, 'sample.ajf'];
    else
        return templates;
    endif
endfunction


local function FormatDetachedBonds bonds
    // :bonds:
    // return: 
    // TODO: move to model
    local bda = first tr bonds;
    local baa = second tr bonds;
    local types = third tr bonds;
    return apt twrite [
        '{}\t{}\t{}{} {}\t{}{} {}',
        igen length bonds, types,
        rName aResidue bda, rUID aResidue bda, aName bda,
        rName aResidue baa, rUID aResidue baa, aName baa
    ];
endfunction


local function appOrE v
    return app orE v;
endfunction


local function Common t
    // ?
    if t === [] then
        return [];
    endif
    if isflat t then
        t = [t];
    endif
    local cand = app uniq t;
    local freq = apt freq [cand, t];
    return apt get [cand, app x_max freq];
endfunction


local function FormatFragments [basisset, fragments, detached, attached]
    // :basisset: 
    // :fragments: List[List[atom]]
    // :detached: List[atom]
    // :attached: List[atom]
    local res = Common rName aResidue fragments;
    local resi = totok Common rUID aResidue fragments;
    local nD = app length detached;
    local nA = app length attached;

    return apt twrite [
        '{}\t{}\t{}\t{}\t{}\t{}\t{}',
        igen length fragments, apt tok_cat [res, resi], app length fragments,
        GetNumberOfFunctions [basisset, apt cat [fragments, attached]],
        nD, nA, app add aFCharge fragments + nD - nA
    ];
endfunction


local function RemoveAllBonds detached_bonds
    GDestroy (tr *detached_bonds)(4);
    *detached_bonds = [];
endfunction


local function RemoveAutoBonds detached_bonds
    local bonds = *detached_bonds;
    local mask = third tr bonds == 'A';
    GDestroy (tr (bonds | mask))(4);
    *detached_bonds = bonds | not mask;
endfunction


local function RemoveBondsByIndices [detached_bonds, indices]
    local bonds = *detached_bonds;
    local mask = zero igen length bonds;
    mask[indices] = 1;
    GDestroy (tr (bonds | mask))(4);
    *detached_bonds = bonds | not mask;
endfunction


local function AutoSplitBonds [detached_bonds, chains]
    local raw_bonds = FMOFragmentation chains;
    *detached_bonds = cat [
        *detached_bonds,
        apt cat [raw_bonds, 'A', DrawDetachMarker [first cTag chains, 0xffffff, raw_bonds]]
    ];
endfunction


local function AddSplitBond [detached_bonds, [bda, baa]]
    *detached_bonds = cat [
        *detached_bonds,
        [[bda, baa, 'M', DrawDetachMarker [cTag aChain bda, 0x00ffff, [[bda, baa]]]]]
    ];
endfunction


local function UpdateFragments [fragments, atoms, detached_bonds]
    *fragments = PartitionAtoms [atoms, detached_bonds];
endfunction


local function AssignAtomsToFragments [atoms, fragments]
    local result, i;
    for i = 1, length fragments loop
        result(i) = atoms | app add apt eqE [[fragments(i)], atoms];
    endloop
    return result;
endfunction


local function RefreshWindow [wkey, basisset, detached_bonds, fragments]
    local [bda, baa] = tr StripBondExtra detached_bonds;
    WindowSetAttr [wkey, [
        detached_bond_list: [text: FormatDetachedBonds detached_bonds],
        fragment_list: [text: FormatFragments [basisset, fragments,
            AssignAtomsToFragments [bda, fragments],
            AssignAtomsToFragments [baa, fragments]]
        ]
    ]];
endfunction


const BOND_PICKER_PANEL = [
    name: 'atom',
    mode: 'pickAtom',
    title: 'pick BDA...',
    location: 'MOE'
];


local function CleanupBondPicker [quit, dbda, dcands]
    dvar_lock app dvar_open [quit, dbda, dcands];
    local bda = *dbda;
    if not (bda === []) then
        local [atom, colorby, color] = bda;
        aSetColorBy [atom, colorby];
        aSetRGB [atom, color];
    endif
    local cands = *dcands;
    if not (cands === []) then
        local [nbr, look] = cands;
        apt aSetNucleusLook [nbr, look];
    endif
endfunction


local function FilterCandidates [bda, nbr]
    if aGeometry bda === 'sp3' then
        return nbr | aElement nbr <> 'H';
    else
        return nbr | andE [aGeometry nbr == 'sp3', aElement nbr == 'C'];
    endif
endfunction


local function BondPickerTask []
    local quit = dvar_open [];
    dvar_lock quit;
    local dbda = dvar_open [];
    local dcands = dvar_open [];

    task_call [#CleanupBondPicker, [quit, dbda, dcands], [master: 'none', creator: 'detach']];

    local wkey = WindowCreate BOND_PICKER_PANEL;
    local bda = (first WindowWait wkey).atom;
    *dbda = [bda, aColorBy bda, aRGB bda];
    aSetColorBy [bda, 'rgb'];
    aSetRGB [bda, 0x999900];

    local nbr = cat aBonds bda;
    local candidates = FilterCandidates [bda, nbr];
    *dcands = [candidates, aNucleusLook candidates];
    aSetNucleusLook [candidates, 'small-sphere'];

    WindowSetAttr [wkey, [atom: [title: 'pick BAA...']]];

    local baa;
    loop
        baa = (first WindowWait wkey).atom;
        if orE eqE [baa, candidates] then
            break;
        elseif orE eqE [baa, nbr] then
            if YesNo 'Selected atom is not SP3 carbon.\ncontinue?' then
                break;
            endif
        endif
    endloop

    WindowDestroy wkey;
    dvar_unlock quit;
    return [bda, baa];
endfunction


local function BondPicker []
    local [result, status] = task_call [#BondPickerTask, [], [master: 'parent', creator: 'blockEOK']];
    if status === '' then
        return result;
    endif
endfunction


local function CleanupMain [quit, wkey, detached_bonds]
    dvar_lock app dvar_open [quit, detached_bonds];
    GDestroy (tr *detached_bonds)(4);
    WindowDestroy wkey;
endfunction


local function Sentinel [wkey, detached_bonds, fragments]
    local old_selected = [];
    local i = 0;
    local [bda, baa, _, gobj] = tr * detached_bonds;
    while andE [andE oValid bda, andE oValid baa, andE GKey gobj] loop
        local rbda = andE [rRibbonMode aResidue bda <> 'none', rRibbonEnable aResidue bda];
        local rbaa = andE [rRibbonMode aResidue baa <> 'none', rRibbonEnable aResidue baa];
        GSetVisible [gobj, apt orE [rbda, not aHidden bda, rbaa, not aHidden baa]];

        local selected = SelectedAtoms [];
        if not (old_selected === selected) then
            old_selected = selected;

            WindowSetData [wkey, [
                fragment_list: (igen length *fragments) | app length AssignAtomsToFragments [selected, *fragments]
            ]];
        endif

        sleep 0.2;
        [bda, baa, _, gobj] = tr *detached_bonds;
    endloop
    task_kill (task_info task_key -1).parent;
endfunction


local function CheckAtomNames atoms
    atoms = atoms | rType aResidue atoms == 'none';

    local alert = [];
    local atom;
    for atom in atoms loop
        local element = aElement atom;
        local name = tolower string aName atom;
        if length name > 1 then
            if     andE [element === 'H', orE (name(2) == "eofgs")] then
                alert = append [alert, atom];
            elseif andE [element === 'B', orE (name(2) == "eraikh")] then
                alert = append [alert, atom];
            elseif andE [element === 'C', orE (name(2) == "laroudsemfn")] then
                alert = append [alert, atom];
            elseif andE [element === 'N', orE (name(2) == "eaibdpoh")] then
                alert = append [alert, atom];
            elseif andE [element === 'O', orE (name(2) == "sg")] then
                alert = append [alert, atom];
            elseif andE [element === 'F', orE (name(2) == "erml")] then
                alert = append [alert, atom];
            elseif andE [element === 'P', orE (name(2) == "drmtboau")] then
                alert = append [alert, atom];
            elseif andE [element === 'S', orE (name(2) == "icernbmg")] then
                alert = append [alert, atom];
            elseif andE [element === 'K', orE (name(2) == "r")] then
                alert = append [alert, atom];
            elseif andE [element === 'Y', orE (name(2) == "b")] then
                alert = append [alert, atom];
            elseif andE [element === 'I', orE (name(2) == "nr")] then
                alert = append [alert, atom];
            elseif andE [element === 'U', orE (name(2) == "u")] then
                alert = append [alert, atom];
            endif
        endif
    endloop
    return alert;
endfunction


const ALERT_ATOM_PANEL = [
    name: 'atom_alert',
    title: 'Atom name alert',
    windowName: 'atom_alert',
    text: ['Auto', 'Continue', 'Cancel'],
    Label: [text: 'these atoms may misrecognition by ABINIT-MP.\nIt is recommended to rename atom name(s).'],
    Hbox: [
        Listbox: [name: 'atoms', onTrigger: 'return', type: 'int'],
        Button: [text: 'refresh', name: 'refresh']
    ]
];


local function AlertAtomDialog atoms
    local wkey = WindowCreate ALERT_ATOM_PANEL;
    WindowShow wkey;

    local alerts = CheckAtomNames atoms;
    if alerts === [] then
        return [1, []];
    endif

    WindowSetAttr [wkey, [atoms: [text: aName alerts]]];

    loop
        local [values, trigger] = WindowWait wkey;
        if trigger === 'atoms' then
            if values.atoms(2) == 1 then
                aSetSelected [Atoms [], 0];
                aSetSelected [alerts(values.atoms(1)), 1];
            else
                View alerts(values.atoms(1));
            endif

        elseif trigger === 'refresh' then
            alerts = CheckAtomNames atoms;
            if alerts === [] then
                return [1, []];
            endif
            WindowSetAttr [wkey, [atoms: [text: aName alerts]]];

        elseif trigger === 'atom_alert' then
            if values.atom_alert === 'Auto' then
                alerts = CheckAtomNames atoms;
                aSetName [alerts, app token apt poke [app string aName alerts, 2, "X"]];
                return [1, []];
            elseif values.atom_alert === 'Continue' then
                return [1, alerts];
            elseif values.atom_alert === 'Cancel' then
                return [0, alerts];
            endif

        endif
    endloop

    WindowDestroy wkey;
endfunction


local function FormatAtomName [atom]
    if tok_length aElement atom == 1 then
        return tok_cat [' ', aName atom];
    else
        return aName atom;
    endif
endfunction


global function fwrite_abinitmp_pdb_line [f, i, atom]
    local header = 'ATOM  ';
    if app orE apt eqE [rType aResidue atom, [['heme', 'none']]] then
        header = 'HETATM';
    endif
    local residue = aResidue atom;
    local [x, y, z] = aPos atom;

	// '{t:-6}{n:5} {t:-4}{c:1}{t:3} {c:1}{n:4}{c:1}   ',
	// '{n:8.3f}{n:8.3f}{n:8.3f}', occupancy_fmt, tfactor_fmt,
	// '          {t:2}{t:2}\n'
    fwrite [f, '{t:-6}{n:5} {t:-4} {t:3} {c:1}{n:4}{c:1}   {n:8.3f}{n:8.3f}{n:8.3f}{n:6.2f}{n:6.2f}\n', header,
        i,
        FormatAtomName atom,
        rName residue,
        cLetter aChain atom,
        rUID residue,
        rINS residue,
        x, y, z,
        aOccupancy atom,
        aTempFactor atom
    ];
endfunction


global function fwrite_abinitmp_pdb [f, chains]
    local chain, atom;
    local i = 0;
    local c = 0;
    local indices = [];
    for chain in chains loop
        c = c + 1;
        for atom in cat cAtoms chain loop
            i = i + 1;
            indices(i) = atom;

            fwrite_abinitmp_pdb_line [f, i, atom];
        endloop
        if c == length chains then
            fwrite [f, 'END\n'];
        else
            fwrite [f, 'TER\n'];
        endif
    endloop
    return indices;
endfunction


local function AbinitMpFragmentFormat l
    local result = [];
    while length l >= 10 loop
        result = append [result, tok_cat apt twrite ['{n:8}', keep [l, 10]]];
        l = drop [l, 10];
    endloop
    if length l <> 0 then
        result = append [result, tok_cat apt twrite ['{n:8}', l]];
    endif
    return tok_cat droplast cat tr [result, '\n'];
endfunction


local function FormatAbinitMpFragment [atoms, fragments, detached_bonds]
    local [bda, baa] = tr StripBondExtra detached_bonds;
    local detached = AssignAtomsToFragments [bda, fragments];
    local attached = AssignAtomsToFragments [baa, fragments];
    local atom_indices = app sort apt indexof [fragments, [atoms]];

    local rbaa = cat attached | cat (attached <> 0);
    local [rbda, _] = tr StripBondExtra detached_bonds [indexof [rbaa, baa]];

    local ibda = indexof [rbda, atoms];
    local ibaa = indexof [rbaa, atoms];

    return twrite ['&FRAGMENT\n{}\n{}\n{}\n{}\n{}\n/',
        AbinitMpFragmentFormat app length fragments,
        AbinitMpFragmentFormat (app add aFCharge fragments + app length detached - app length attached),
        AbinitMpFragmentFormat (app length attached),
        tok_cat droplast cat tr [app AbinitMpFragmentFormat atom_indices, '\n'],
        tok_cat droplast cat tr [apt AbinitMpFragmentFormat [ibda, ibaa], '\n']
    ];
endfunction


local function AbinitMpFilePrompt []
    local prefix;
    loop
        prefix = FilePrompt [mode: 'saveAs'];
        if prefix === [] then
            return [];
        endif

        local fnpdb = tok_cat [prefix, '.pdb'];
        local fnajf = tok_cat [prefix, '.ajf'];
        local ftpdb = ftype fnpdb;
        local ftajf = ftype fnajf;
        if ftpdb == 'dir' then
            Warning twrite ['{} is directory', fnpdb];
            continue;
        endif
        if ftpdb == 'other' then
            Warning twrite ['file type of {} is other', fnpdb];
            continue;
        endif
        if ftajf == 'dir' then
            Warning twrite ['{} is directory', fnajf];
            continue;
        endif
        if ftajf == 'other' then
            Warning twrite ['file type of {} is other', fnajf];
            continue;
        endif
        if ftpdb == 'file' and ftajf == 'file' then
            if not YesNo twrite ['{} and {} is already exists. overwrite?', fnpdb, fnajf] then
                continue;
            endif
        elseif ftajf == 'file' then

        elseif ftpdb == 'file' then
            if not YesNo twrite ['{} is already exists. overwrite?', fnpdb] then
                continue;
            endif
        elseif ftajf == 'file' then
            if not YesNo twrite ['{} is already exists. overwrite?', fnajf] then
                continue;
            endif
        endif
        break;
    endloop
    return prefix;
endfunction


function fmoe_fragmentation opts
    opts = tagcat [opts, [
        template: 'templates\\sample.ajf',
        renderer: 'bin\\fill_template.win64.exe',
        moe: 'tests\\test.moe',
        fbase: 'test',
        pdb: 'tests\\temp\\test.pdb',
        ajf: 'tests\\temp\\test.ajf',
        basis_set: '6-31g*'
    ]];
    print opts;
    Open opts.moe;
    local detached_bonds = dvar_open [];
    local fragments = dvar_open [];
    local chains = Chains [];
    AutoSplitBonds [detached_bonds, chains];
    UpdateFragments [fragments, cat cAtoms chains, *detached_bonds];
    local pdb_path = fopenw opts.pdb;
    local w_atoms = fwrite_abinitmp_pdb [pdb_path, chains];
    fclose pdb_path;
    RenderTemplate [
        BASENAME: opts.fbase,
        TOTAL_CHARGE: totok add cat aFCharge cAtoms chains,
        NUM_FRAGS: totok length *fragments,
        BASIS_SET: opts.basis_set,
        ABINITMP_FRAGMENT: FormatAbinitMpFragment [w_atoms, *fragments, *detached_bonds],
        renderer: opts.renderer,
        TEMPLATE_PATH: ffullname opts.template,
        OUTPUT_PATH: ffullname opts.ajf
    ];
endfunction


global function FMOEFragmentationGUI[]
    local quit = dvar_open [];
    dvar_lock quit;

    local wkey = WindowCreate MAIN_PANEL;
    WindowShow wkey;

    // fmoe_templates is a globaal variable.
    if fmoe_templates == '' then
        fmoe_templates = fcat [GetBasedir[], 'templates'];
    endif
    local templates = GetTemplates fmoe_templates;

    local detached_bonds = dvar_open [];
    local fragments = dvar_open [];

    local chains = Chains[];

    AutoSplitBonds [detached_bonds, chains];  // slow
    UpdateFragments [fragments, cat cAtoms chains, *detached_bonds];  // slow
    // TODO: remove the hard coding, i.e. '6-31g'.
    RefreshWindow [wkey, '6-31g*', *detached_bonds, *fragments];

    // TODO: rename select_template more acculately.
    WindowSetAttr [wkey, [select_template: [text: templates]]];
    local [default_basisset, aliases] = GetProgramBasisSets fext (WindowGetData [wkey, ['select_template']]).select_template;
    WindowSetAttr [wkey, [select_basisset: [text: first untag aliases]]];

    if not (default_basisset === []) then
        WindowSetData [wkey, [select_basisset: default_basisset]];
    endif

    // ?
    task_call [#CleanupMain, [quit, wkey, detached_bonds], [master: 'none', creator: 'detach']];
    // TODO: more acculate naming
    task_call [#Sentinel, [wkey, detached_bonds, fragments], [master: 'parent', creator: 'detach']];

    loop
        local [values, trigger] = WindowWait wkey;

        if trigger === 'auto' then
            RemoveAutoBonds detached_bonds;
            AutoSplitBonds [detached_bonds, chains];
            // TODO: neccessary for more precise treatment of a reference variable(fragments).
            // TODO: chains should be reset.
            UpdateFragments [fragments, cat cAtoms chains, *detached_bonds];
            // TODO: second varibles should be more understandable. 
            RefreshWindow [wkey, tagget [aliases, values.select_basisset], *detached_bonds, *fragments];

        elseif trigger === 'reset' then
            RemoveAllBonds detached_bonds;
            UpdateFragments [fragments, cat cAtoms chains, *detached_bonds];
            RefreshWindow [wkey, tagget [aliases, values.select_basisset], *detached_bonds, *fragments];

        elseif trigger === 'remove_bond' then
            // naming? Indices? not Pointer or Key?
            RemoveBondsByIndices [detached_bonds, first values.detached_bond_list];
            UpdateFragments [fragments, cat cAtoms chains, *detached_bonds];
            RefreshWindow [wkey, tagget [aliases, values.select_basisset], *detached_bonds, *fragments];

        elseif trigger === 'refresh' then
            UpdateFragments [fragments, cat cAtoms chains, *detached_bonds];
            RefreshWindow [wkey, tagget [aliases, values.select_basisset], *detached_bonds, *fragments];

        elseif trigger === 'add_bond' then
            local detach = BondPicker [];
            // should reverse if
            if not (detach === []) then
                AddSplitBond [detached_bonds, detach];
                UpdateFragments [fragments, cat cAtoms chains, *detached_bonds];
                RefreshWindow [wkey, tagget [aliases,  values.select_basisset], *detached_bonds, *fragments];
            endif

        elseif trigger === 'select_basisset' then
            // ?
            RefreshWindow [wkey, tagget [aliases, values.select_basisset], *detached_bonds, *fragments];

        elseif trigger === 'detached_bond_list' then
            aSetSelected [Atoms [], 0];
            local selected_detached_atoms = cat StripBondExtra (*detached_bonds)[first values.detached_bond_list];
            aSetSelected [selected_detached_atoms, 1];
            WindowSetData [wkey, [
                fragment_list: (igen length *fragments) | app length AssignAtomsToFragments [selected_detached_atoms, *fragments]
            ]];

        elseif trigger === 'fragment_list' then
            aSetSelected [Atoms[], 0];
            local selected_fragmennt_atoms = cat (*fragments)[first values.fragment_list];
            aSetSelected [selected_fragmennt_atoms, 1];
            WindowSetData [wkey, [
                detached_bond_list: (igen length *detached_bonds) | app orE app orE apt eqE [[[selected_fragmennt_atoms]], StripBondExtra *detached_bonds]
            ]];

        elseif trigger === 'fmoe_fragmentation' then
            UpdateFragments [fragments, cat cAtoms chains, *detached_bonds];

            if fext values.select_template === 'ajf' then
                local [[ok, _], state] = task_call [#AlertAtomDialog, cat cAtoms chains, [master: 'parent']];
                if state === '' and ok then
                    local path_prefix = AbinitMpFilePrompt [];
                    if not (path_prefix === []) then
                        local pdb_path = fopenw tok_cat [path_prefix, '.pdb'];
                        local w_atoms = fwrite_abinitmp_pdb [pdb_path, chains];
                        fclose pdb_path;
                        local envTemplate = [
                            BASENAME: ftail path_prefix,
                            TOTAL_CHARGE: totok add cat aFCharge cAtoms chains,
                            NUM_FRAGS: totok length *fragments,
                            BASIS_SET: values.select_basisset,
                            ABINITMP_FRAGMENT: FormatAbinitMpFragment [w_atoms, *fragments, *detached_bonds]
                        ];
                        RenderTemplate tagcat [envTemplate, [
                            TEMPLATE_PATH: ffullname fcat [fmoe_templates, values.select_template],
                            OUTPUT_PATH: ffullname tok_cat [path_prefix, '.ajf']]
                        ];
                        if (WindowGetData [wkey, ['gen_job']]).gen_job then
                            RenderTemplate tagcat [envTemplate, [
                                TEMPLATE_PATH: ffullname fcat [fmoe_templates, tok_cat [fbase values.select_template, '.sh']],
                                OUTPUT_PATH: ffullname tok_cat [path_prefix, '.sh']]
                        ];

                        endif
                    endif
                endif
            else
                Warning twrite ['unknown template extension: {}', fext values.select_template];
            endif

        endif

    endloop
    WindowDestroy wkey;
endfunction

function main opts
    if opts.test == 'fragmentation' then
        fmoe_fragmentation opts; 
    endif
endfunction
