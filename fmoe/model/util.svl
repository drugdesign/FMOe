#set title 'fmoe:util';

global FMOE_BASISSET_DATA;
function json_Read;


global function mean_tempfactor [atoms]
    return add aTempFactor atoms / length atoms;
endfunction

global function max_tempfactor [atoms]
    return max aTempFactor atoms;
endfunction

global function min_tempfactor [atoms]
    return min aTempFactor atoms;
endfunction


global function Initialize_selection []
    aSetSelected [_Atoms['$$all'], 0];
    aSetFixed [_Atoms['$$all'], 0];
endfunction

global function GetH [range]
    return _Atoms[range] | aElement _Atoms[range] == 'H';
endfunction

function GetBasedir []
    local env = modenv [];
    return fcat [fpath env.filename, '..', '..'];
endfunction


function BatchBinarySearch [key, candidates]
    // :key:
    // :candidates: sorted items 
    local lefts = zero key;
    local rights = (length candidates + 1) * one key;

    while orE ((rights - lefts) > 1) loop
        local mid = floor (lefts + (rights - lefts) / 2);
        local mask = candidates[mid] >= key;
        rights | mask = mid | mask;
        lefts | not mask = mid | not mask;
    endloop
    mask = candidates[rights] == key;
    rights | not mask = 0;
    return rights;
endfunction


local function loadBasisSetData []
    if FMOE_BASISSET_DATA === [] then
        local data = fcat [GetBasedir[], 'basisset.json'];
        local json = freadb [data, 'line', 1000];
        FMOE_BASISSET_DATA = first json_Read [cat json, []];
    endif
endfunction


local function getBasisSetNames []
    loadBasisSetData [];
    return first untag FMOE_BASISSET_DATA;
endfunction


local function getBasisSetData name
    loadBasisSetData [];
    return tagget [FMOE_BASISSET_DATA, name];
endfunction


function GetNumberOfFunctions [basis, atoms]
    // Functionals?
    return app add apt tagget [getBasisSetData basis, aElement atoms];
endfunction


function GetProgramBasisSets ext
    local data = fcat [GetBasedir[], 'basisset', tok_cat [ext ,'.json']];
    if ftype data === 'file' then
        local json = freadb [data, 'line', 1000];
        local res = first json_Read [cat json, []];;
        return [res.default, res.list];
    else
        local names = getBasisSetNames [];
        return [[], tr [names, names]];
    endif
endfunction


function GetTemplates path
    // :path: templates directory path
    // return: List[str]
    print path;
    local templates = ftail flist path;
    if length templates > 1 then
        return templates | not eqE [templates, 'sample.ajf'];
    else
        return templates;
    endif
endfunction
